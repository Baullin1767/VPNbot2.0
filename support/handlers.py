from aiogram.types import Message, CallbackQuery
from config import bot, ADMINS
from support.kb import fast_answers
from data_base import db
from datetime import datetime as dt, timedelta

from servises import google_sheets_servis

def get_user_id_from_message(mes: Message):
    try:
        user_id = mes.text.split('#ID')[-1]
    except AttributeError:
        user_id = mes.caption.split('#ID')[-1]

    return int(user_id)

async def send_to_support(mes: Message):
    if not db.get_user_exist(mes.from_user.id) \
            and mes.from_user.id not in ADMINS:
        db.add_user(mes.from_user.id)
    if mes.reply_to_message and str(mes.from_user.id) in ADMINS:
        user_id = get_user_id_from_message(mes.reply_to_message)
        if mes.content_type == 'photo':
            await bot.send_photo(user_id, mes.photo[-1]['file_id'])
        elif mes.content_type == 'document':
            await bot.send_document(user_id, mes.document['file_id'], caption=f'-ID{user_id}')
        else:
            await bot.send_message(user_id, mes.text)
        db.add_last_admin_id(user_id, mes.message_id)
    else:
        user_id = mes.from_user.id
        caption = f'[{mes.from_user.full_name}]'+\
(f'(t.me/{mes.from_user.username}) ' if mes.from_user.username else '') + f'#ID{user_id}'
        if db.get_last_admin_id(user_id) != 0:
            if mes.content_type == 'photo':
                await bot.send_photo(ADMINS[0], mes.photo[-1]['file_id'], caption=f'{mes.caption}\n\n' +
                                caption, parse_mode='Markdown',
                                reply_markup=fast_answers)
            elif mes.content_type == 'document':
                await bot.send_document(ADMINS[0], mes.document['file_id'], caption=f'{mes.caption}\n\n' +
                                caption, parse_mode='Markdown',
                                reply_markup=fast_answers)

            else:
                await bot.send_message(ADMINS[0], f'{mes.text}\n\n' +
                                caption, parse_mode='Markdown',
                            reply_to_message_id=db.get_last_admin_id(user_id),
                            disable_web_page_preview=True, reply_markup=fast_answers)
        else:
            if mes.content_type == 'photo':
                await bot.send_photo(ADMINS[0], mes.photo[-1]['file_id'], caption=f'{mes.caption}\n\n' +
                                caption, parse_mode='Markdown',
                            reply_markup=fast_answers)
            elif mes.content_type == 'document':
                await bot.send_document(ADMINS[0], mes.document['file_id'], caption=f'{mes.caption}\n\n' +
                                caption, parse_mode='Markdown',
                            reply_markup=fast_answers)
            else:
                await bot.send_message(ADMINS[0], f'{mes.text}\n\n' +
                            caption, parse_mode='Markdown',
                            disable_web_page_preview=True, reply_markup=fast_answers)




async def trial_link(call: CallbackQuery):
    await call.answer('–û—Ç–ø—Ä–∞–≤–∏–ª')
    user_id = get_user_id_from_message(call.message)
    text='''*–≠—Ç–æ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –¥–∞—Å—Ç —Ç–µ–±–µ –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Å–ª–µ–¥—É–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:*

üìç –°–∫–æ–ø–∏—Ä—É–π —Å–≤–æ–π ID (—Ü–∏—Ñ—Ä—ã) –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
üìç –°–∫–∞—á–∞–π —Ñ–∞–π–ª (–Ω–∞–∂–∞—Ç—å —Ç—Ä–∏ —Ç–æ—á–∫–∏ - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∑–∞–≥—Ä—É–∑–∫–∏)
üìç –ó–∞–π–¥–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ WireGuard
–Ω–∞–∂–º–∏ –≤ –Ω–µ–º –Ω–∞ ‚ûïÔ∏è
‚û°Ô∏è –∏–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ –∞—Ä—Ö–∏–≤–∞
‚û°Ô∏è –ø–æ–∏—Å–∫
‚û°Ô∏è –≤—Å—Ç–∞–≤—å —Å–≤–æ–π ID
‚û°Ô∏è –Ω–∞–∂–º–∏ –Ω–∞ —Ñ–∞–π–ª

üìç –ß—Ç–æ–± –≤–∫–ª—é—á–∏—Ç—å VPN, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–± –≤—ã–∫–ª—é—á–∏—Ç—å —Ç–æ–∂–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—ã–≤–∞–π –æ—Ç–∫–ª—é—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –µ—Å–ª–∏ —Ç–µ–±–µ –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–∏–∫—Ä—ã—Ç–∏–µ - –≤–æ-–ø–µ—Ä–≤—ã—Ö, –ª–∏–º–∏—Ç, –∞ –≤–æ-–≤—Ç–æ—Ä—ã—Ö, —Å–µ—Ç–µ–≤–∞—è –≥–∏–≥–∏–µ–Ω–∞)

‚ùìÔ∏è–ï—Å–ª–∏ —É —Ç–µ–±—è –æ—Å—Ç–∞–ª—Å—è –∫–∞–∫–æ–π-—Ç–æ –≤–æ–ø—Ä–æ—Å, —Ç–æ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –µ–≥–æ –ø—Ä—è–º–æ –≤ –±–æ—Ç.

*–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—èüíô*'''

    await bot.send_message(ADMINS[0], f'{text}\n\n' +
                            f'#ID{user_id} ',
                            reply_to_message_id=call.message.message_id, parse_mode='Markdown')

    await bot.send_message(user_id, text, parse_mode='Markdown')
    db.add_date_sub(user_id, dt.now().date() + timedelta(days=3))
    db.add_trial(user_id, True)



async def success_payment(call: CallbackQuery):
    await call.answer('–û—Ç–ø—Ä–∞–≤–∏–ª')
    user_id = get_user_id_from_message(call.message)
    referal_id=db.get_ref(user_id)
    text='''*–¢–≤–æ—è –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VPN.

–°–ø–∞—Å–∏–±–æ –∑–∞ –≤—ã–±–æ—Ä –º–æ–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞üíô*'''

    await bot.send_message(ADMINS[0], f'{text}\n\n' +
                            f'#ID{user_id} ',
                            reply_to_message_id=call.message.message_id, parse_mode='Markdown')

    await bot.send_message(user_id, text, parse_mode='Markdown')
    db.add_date_sub(user_id, dt.now().date() + timedelta(days=29))

    if referal_id != None:
        db.add_invited(referal_id)

    await google_sheets_servis.update_table()



async def send_ref_link(mes: Message):
    user_id = mes.from_user.id
    text=f'''üôå –ü—Ä–∏—è—Ç–Ω–æ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ)

‚úÖÔ∏è –î–∞, —É –Ω–∞—Å –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ - –¥–∞–π —Å–≤–æ–∏–º –¥—Ä—É–∑—å—è–º —Ç–≤–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç –∏ —Ç—ã –ø–æ–ª—É—á–∏—à—å –∑–∞ –∫–∞–∂–¥–æ–≥–æ, –∫—Ç–æ –æ–ø–ª–∞—Ç–∏—Ç –¥–æ—Å—Ç—É–ø, —Å–∫–∏–¥–∫—É 20% –Ω–∞ –æ–ø–ª–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞.

‚¨áÔ∏è –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: https://t.me/starks_vpn_20_bot?start={user_id}


–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—à—å –º–æ–π —Å–µ—Ä–≤–∏—Åüíô'''

    await bot.send_message(user_id, text)